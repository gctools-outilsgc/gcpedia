#!/bin/sh
### BEGIN INIT INFO
# Provides:          mwlib
# Required-Start:    $local_fs $network $remote_fs $syslog
# Required-Stop:     $local_fs $network $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Web service for enerating pdf versions of wikitext pages
# Description:       Generates pdf versions of wikitext pages
### END INIT INFO

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="mwlib HTTP service"
NAME=mwlib
SCRIPT_PATH1=/usr/bin/nserve
SCRIPT_PATH2=/usr/bin/mw-qserve
SCRIPT_PATH3=/usr/bin/nslave
CACHE_PATH=/sites/data
LOG_PATH=/sites/mwlib/log
DAEMON1="$SCRIPT_PATH1"
DAEMON2="$SCRIPT_PATH2"
DAEMON3="$SCRIPT_PATH3"
DAEMON_ARGS=""
PIDFILE1=/var/run/$NAME-nserve.pid
PIDFILE2=/var/run/$NAME-mw-qserve.pid
PIDFILE3=/var/run/$NAME-nslave.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -e "$SCRIPT_PATH1" ] || exit 0
[ -e "$SCRIPT_PATH2" ] || exit 0
[ -e "$SCRIPT_PATH3" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# export the port and host env vars, if set
export PORT
export INTERFACE

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# up the number of fds [sockets] from 1024
	ulimit -n 64000

	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started

	start-stop-daemon --start --quiet --pidfile $PIDFILE1 -bm --no-close \
		-c mwlib:mwlib --test \
		--exec $DAEMON1 -- $DAEMON_ARGS >> $LOG_PATH/mwlib.log 2>&1 \
		|| return 1
	start-stop-daemon --start --quiet --pidfile $PIDFILE2 -bm --no-close \
		-c mwlib:mwlib --test \
		--exec $DAEMON2 -- $DAEMON_ARGS >> $LOG_PATH/mwlib.log 2>&1 \
		|| return 1
	start-stop-daemon --start --quiet --pidfile $PIDFILE3 -bm --no-close \
		-c mwlib:mwlib --test \
		--exec $DAEMON3 -- $DAEMON_ARGS >> $LOG_PATH/mwlib.log 2>&1 \
		|| return 1

	start-stop-daemon --start --quiet --pidfile $PIDFILE1 -bm --no-close \
		-c mwlib:mwlib \
		--exec $DAEMON1 -- $DAEMON_ARGS >> $LOG_PATH/mwlib.log 2>&1 \
		|| return 2
	start-stop-daemon --start --quiet --pidfile $PIDFILE2 -bm --no-close \
		-c mwlib:mwlib \
		--exec $DAEMON2 -- $DAEMON_ARGS >> $LOG_PATH/mwlib.log 2>&1 \
		|| return 2
	start-stop-daemon --start --quiet --pidfile $PIDFILE3 -bm --no-close \
		-c mwlib:mwlib \
		--exec $DAEMON3 -- $DAEMON_ARGS >> $LOG_PATH/mwlib.log 2>&1 \
		|| return 2
	echo "Started mwlib server on port $PORT"



	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
    sleep 5
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/60/KILL/5 --user mwlib
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/5/KILL/5 --exec $DAEMON1
	[ "$?" = 2 ] && return 2
	start-stop-daemon --stop --quiet --oknodo --retry=0/5/KILL/5 --exec $DAEMON2
	[ "$?" = 2 ] && return 2
	start-stop-daemon --stop --quiet --oknodo --retry=0/5/KILL/5 --exec $DAEMON3
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE1
	rm -f $PIDFILE2
	rm -f $PIDFILE3
	return "$RETVAL"
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	status_of_proc -p "$PIDFILE1" "$NAME - nserve"
	status_of_proc -p "$PIDFILE2" "$NAME - mw-qserve"
	status_of_proc -p "$PIDFILE3" "$NAME - nslave"
	exit $?
	;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac
