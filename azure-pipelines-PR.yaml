trigger:  # don't trigger outside PRs
- none

pr:  # Trigger the pipeline only for PRs targeting master branch
- main


variables:
  location: 'canadacentral'
  rgTemplateFile: '../.bicep/PR/test-instance-setup.bicep'
  azSubServiceConnection: 'environment-azure-subscription-service-connection'
  acrServiceConnection: 'environment-acr-service-connection'
  db_resource_group: 'environment-db-resource-group'
  review_db_server_name: 'environment-db-server-name'
  imageRepository: 'environment-image-repository-name'
  review_subnet_ID: 'environment-subnet-id'
  review_plan_ID: 'environment-app-service-plan-id'
  REVIEW_DB_SERVER_PASS: 'environment-db-password'
  acrName: 'environment-acr-name'

pool:
  vmImage: 'ubuntu-latest'


jobs:
- job: setup
  displayName: build and set up review sites
  steps:
  - task: Docker@2
    displayName: Build and Push Container image to ACR
    inputs:
      command: 'buildAndPush'
      containerRegistry: $(acrServiceConnection)
      repository: '$(imageRepository)_pr-$(System.PullRequest.PullRequestNumber)' # per-PR repos for easier cleanup
      tags: '$(Build.SourceVersion)'

  - task: AzureCLI@2
    displayName: set up review / test instance using bicep
    condition: succeeded()
    inputs:
      azureSubscription: $(azSubServiceConnection)
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az deployment sub create --location $LOCATION --template-file $rgTemplateFile \
          --parameters prNumber=$PR dbServerName=$DBSERVERNAME dbServerRG=$DBRG containerTag=$TAG dbServerPass=$(REVIEW_DB_SERVER_PASS) \
          subnetID=$SUBNET_ID planID=$PLAN_ID acrName=$ACR_NAME siteType=gcwiki
        az deployment sub create --location $LOCATION --template-file $rgTemplateFile \
          --parameters prNumber=$PR dbServerName=$DBSERVERNAME dbServerRG=$DBRG containerTag=$TAG dbServerPass=$(REVIEW_DB_SERVER_PASS) \
          subnetID=$SUBNET_ID planID=$PLAN_ID acrName=$ACR_NAME siteType=gcpedia
    env:
      DBRG: $(db_resource_group)
      DBSERVERNAME: $(review_db_server_name)
      TAG: $(Build.SourceVersion)
      PR: $(System.PullRequest.PullRequestNumber)
      SUBNET_ID: $(review_subnet_ID)
      PLAN_ID: $(review_plan_ID)
      LOCATION: $(location)
      ACR_NAME: $(acrName)

  - bash: |
      TEST=$(curl -L https://api.github.com/repos/gctools-outilsgc/gcpedia/issues/$PR/comments | grep -c "${{ variables.commentStringGCWiki }}")
      echo "##vso[task.setvariable variable=commentExists]$TEST"
      echo "Comments found about the test instance already in the PR: $TEST"
    displayName: Check for comment in PR
    env:
      PR: $(System.PullRequest.PullRequestNumber)

  - task: GitHubComment@0
    inputs:
      gitHubConnection: $(github_connection)
      repositoryName: $(Build.Repository.Name)
      id: $(System.PullRequest.PullRequestNumber)
      comment: '$(commentStringGCWiki) https://gcwiki-dev-pr-$(System.PullRequest.PullRequestNumber).azurewebsites.net/ <br />
                $(commentStringGCPedia) https://gcpedia-dev-pr-$(System.PullRequest.PullRequestNumber).azurewebsites.net/ '
    condition: and(succeeded(), eq(variables['commentExists'], '0'))
    displayName: Post a comment to PR with link to review site
