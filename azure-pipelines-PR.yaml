trigger:  # don't trigger outside PRs
- none

pr:  # Trigger the pipeline only for PRs targeting master branch
- main


variables:
  imageRepository: 'wiki'
  location: 'canadacentral'
  RGtemplateFile: '.bicep/PR/test-instance-setup.bicep'
  commentStringGCWiki: 'GCWiki test instance up at:'  # String used for PR comment to provide link to review site
  commentStringGCPedia: 'GCPedia test instance up at:'

pool:
  vmImage: 'ubuntu-latest'


jobs:
- job: setup
  displayName: build and set up review site infrastructure
  steps:
  - task: Docker@2
    displayName: Build and Push Container image to ACR
    inputs:
      command: 'buildAndPush'
      containerRegistry: $(acrServiceConnection)
      repository: '$(imageRepository)_pr-$(System.PullRequest.PullRequestNumber)' # per-PR repos for easier cleanup
      tags: '$(Build.SourceVersion)'

  - task: AzureCLI@2
    displayName: set up review / test instance using bicep
    condition: succeeded()
    inputs:
      azureSubscription: $(azSubServiceConnection)
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az deployment sub create --location $LOCATION --template-file $TEMPLATE_FILE \
          --parameters prNumber=$PR dbServerName=$DBSERVERNAME dbServerRG=$DBRG containerTag=$TAG dbServerPass=$(REVIEW_DB_SERVER_PASS) \
          subnetID=$SUBNET_ID planID=$PLAN_ID acrName=$ACR_NAME siteType=gcwiki
        az deployment sub create --location $LOCATION --template-file $TEMPLATE_FILE \
          --parameters prNumber=$PR dbServerName=$DBSERVERNAME dbServerRG=$DBRG containerTag=$TAG dbServerPass=$(REVIEW_DB_SERVER_PASS) \
          subnetID=$SUBNET_ID planID=$PLAN_ID acrName=$ACR_NAME siteType=gcpedia phpEnv='php|8.2' scriptPath='/gcwiki' articlePath='/wiki/$1' \
          appCommandLine='bash /home/site/wwwroot/gcwiki/.azure/dev-setup.sh; bash /home/site/wwwroot/gcwiki/.azure/env-init.sh' cacheType='CACHE_MEMCACHED'
    env:
      DBRG: $(db_resource_group)
      DBSERVERNAME: $(review_db_server_name)
      TAG: $(Build.SourceVersion)
      PR: $(System.PullRequest.PullRequestNumber)
      SUBNET_ID: $(review_subnet_ID)
      PLAN_ID: $(review_plan_ID)
      LOCATION: $(location)
      TEMPLATE_FILE: $(RGtemplateFile)
      ACR_NAME: $(acrName)

  - bash: |
      TEST=$(curl -L https://api.github.com/repos/gctools-outilsgc/gcpedia/issues/$PR/comments | grep -c "${{ variables.commentStringGCWiki }}")
      echo "##vso[task.setvariable variable=commentExists]$TEST"
      echo "Comments found about the test instance already in the PR: $TEST"
    displayName: Check for comment in PR
    env:
      PR: $(System.PullRequest.PullRequestNumber)

  - task: GitHubComment@0
    inputs:
      gitHubConnection: $(github_connection)
      repositoryName: $(Build.Repository.Name)
      id: $(System.PullRequest.PullRequestNumber)
      comment: '$(commentStringGCWiki) https://gcwiki-dev-pr-$(System.PullRequest.PullRequestNumber).azurewebsites.net/ <br />
                $(commentStringGCPedia) https://gcpedia-dev-pr-$(System.PullRequest.PullRequestNumber).azurewebsites.net/ '
    condition: and(succeeded(), eq(variables['commentExists'], '0'))
    displayName: Post a comment to PR with link to review site

- job: deploy
  displayName: deploy gcpedia review site code
  dependsOn: setup
  condition: succeeded()
  steps:
  - bash: |
      php --version
      composer --version
      git --version
      curl --version
      mkdir -p /tmp/gcpedia_build/gcwiki && cd /tmp/gcpedia_build
      git clone https://github.com/gctools-outilsgc/gcpedia.git
      cd gcpedia && git submodule init && git submodule update --recursive --init
      cd extensions/OpenIDConnect && composer install --no-dev --no-interaction
      cd ../PluggableAuth && composer install --no-dev --no-interaction
      cd ../TimedMediaHandler && composer install --no-dev --no-interaction
      rm -rf /tmp/gcpedia_build/gcpedia/.git/
      cd /tmp/gcpedia_build/gcwiki
      MEDIAWIKI_MAJOR_VERSION=1.40 && MEDIAWIKI_VERSION=1.40.2
      curl -fSL "https://releases.wikimedia.org/mediawiki/${MEDIAWIKI_MAJOR_VERSION}/mediawiki-${MEDIAWIKI_VERSION}.tar.gz" -o mediawiki.tar.gz
      curl -fSL "https://releases.wikimedia.org/mediawiki/${MEDIAWIKI_MAJOR_VERSION}/mediawiki-${MEDIAWIKI_VERSION}.tar.gz.sig" -o mediawiki.tar.gz.sig
      export GNUPGHOME="$(mktemp -d)"
      gpg --batch --keyserver keyserver.ubuntu.com --recv-keys \
      D7D6767D135A514BEB86E9BA75682B08E8A3FEC4 \
      441276E9CCD15F44F6D97D18C119E1A64D70938E \
      F7F780D82EBFB8A56556E7EE82403E59F9F8CD79 \
      1D98867E82982C8FE0ABC25F9B69B3109D3BB7B0
      gpg --batch --verify mediawiki.tar.gz.sig mediawiki.tar.gz
      tar -x --strip-components=1 -f mediawiki.tar.gz
      gpgconf --kill all
      rm -r "$GNUPGHOME" mediawiki.tar.gz.sig mediawiki.tar.gz
      cp -r /tmp/gcpedia_build/gcpedia/* ./
      cp -r /tmp/gcpedia_build/gcpedia/.azure ./
      ls -la
    displayName: prepare gcpedia code build environment

  - task: ArchiveFiles@2
    displayName: 'Archive files'
    inputs:
      rootFolderOrFile: '/tmp/gcpedia_build/gcwiki'
      includeRootFolder: true
      archiveType: zip
      archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      replaceExistingArchive: true

  - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
    displayName: 'Upload package'
    artifact: drop

  - task: AzureWebApp@1
    displayName: 'Deploy Azure Web App gcpedia PR code'
    inputs:
      azureSubscription: $(azSubServiceConnection)
      appName: gcpedia-dev-pr-$(System.PullRequest.PullRequestNumber)
      package: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
